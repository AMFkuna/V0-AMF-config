############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> ERCF MCUs are called "ercf" 

# ------------------------------------------------------------------------------------------

[gcode_macro _PRINTER_VARIABLE]
description: Helper: Contains defined printer specific variables
##### Display info #####
variable_display: {
    "bootsplash": "__voron_bootsplash",      # [none|__voron_bootsplash] which bootsplash to use
    "chamber_icon": "chamberv0",               # [chamber|chamberv0|chambervt|chamberv2] which icon to use for chamber (only shows if you have a chamber thermistor)
    "group": "__voron_display",              # [none|__voron_display] which display layout to use, none will be default layout
    "icon": "voron_heart",                   # [voron|voron_heart|ercf_carrot] used to show a icon if available on the display
    "name": "V0.2175",                     # printer name shown on the display
    "printing_message": "Printer goes brrr"           # Set a suitable message if you want to spice it up
    }

## Temperatures to load/unload different filament types with. ('Filament_type', unload_temperature, load_temperature)
variable_filament_temperature_array: [('NONE', 0, 0), ('PLA', 190, 215), ('ABS', 220, 240), ('PET', 215, 250), ('FLEX', 215, 230), ('ASA', 220, 260), ('NYLON', 260, 280), ('PC', 280, 280)]

gcode:

[include overrides/*.cfg]

#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#
## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the
## following `variable_startprint_actions` definition. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES]
variable_startprint_actions: "bed_soak", "chamber_soak", "extruder_heating", "primeline"
gcode:

#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#
[heater_bed]
control = pid
pid_kp = 54.785
pid_ki = 2.063
pid_kd = 363.636

[extruder]
control = pid
pid_kp = 32.377
pid_ki = 2.096
pid_kd = 125.056

[printer]
kinematics: corexy
max_velocity: 600
max_accel: 10000
max_z_velocity: 30
max_z_accel: 50
square_corner_velocity: 5.0

[stepper_x]
homing_speed: 30

[stepper_y]
homing_speed: 30

[stepper_z]
position_endstop = 119.200
homing_speed: 20
endstop_pin: ^Z_STOP

[tmc2209 stepper_x]
uart_pin: MCU_TMCUART
tx_pin: MCU_TMCTX
uart_address: 0
driver_SGTHRS: 75

[tmc2209 stepper_y]
uart_pin: MCU_TMCUART
tx_pin: MCU_TMCTX
uart_address: 2
driver_SGTHRS: 75

[tmc2209 stepper_z]
stealthchop_threshold: 999999
uart_pin: MCU_TMCUART
tx_pin: MCU_TMCTX
uart_address: 1

[extruder]
dir_pin: !E_DIR
max_extrude_only_distance: 1150
max_extrude_cross_section: 9999

[fan_generic filter]
pin: expander:PA1

[temperature_sensor Chamber]
sensor_type: Generic 3950
sensor_pin: expander:PA6

[output_pin caselight]
pin: expander:PA2
value: 50

[neopixel display_lights]
pin: displayEncoder:PA0
chain_count: 1
color_order: GRB
initial_RED: 0
initial_GREEN: 0.0039
initial_BLUE: 0.0039

# Neopixel leds integrated in the BTT mini12864 display
[gcode_macro _USER_VARIABLES]
variable_status_leds_minidisplay_enabled = True
variable_status_leds_minidisplay_led_name: "display_lights"
gcode:

# Also include directly the leds control macros from here 
[include macros/hardware_functions/status_leds.cfg]

[gcode_macro _COMMON_VARIABLE]
description: Helper: Contains common macro variables
variable_bed_screws: "true"
gcode:

[input_shaper]
# Supported shapers: zv, mzv, zvd, ei, 2hump_ei, 3hump_ei
shaper_freq_x: 110.0
shaper_type_x: ei
shaper_freq_y: 75.6
shaper_type_y: zv
